package udman;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


public class ExtractDialog extends javax.swing.JDialog {

    
    private final ArrayList<FileProxy> fileProxies;
    
    /**
     * Creates new form ExtractDialog
     */
    public ExtractDialog(java.awt.Frame parent, ArrayList<FileProxy> proxies) {
        super(parent, true);
        initComponents();
        this.fileProxies=proxies;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgNameLength = new javax.swing.ButtonGroup();
        fcOutputFolder = new javax.swing.JFileChooser();
        pCommands = new javax.swing.JPanel();
        jbtExtract = new javax.swing.JButton();
        jbtCancel = new javax.swing.JButton();
        pMain = new javax.swing.JPanel();
        pOutput = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfOutputFolder = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        pSettings = new javax.swing.JPanel();
        jcbBinaries = new javax.swing.JCheckBox();
        jcbTapeImages = new javax.swing.JCheckBox();
        jcbForceBinaries = new javax.swing.JCheckBox();
        jcbBigCas = new javax.swing.JCheckBox();
        pNaming = new javax.swing.JPanel();
        jcbShortNames = new javax.swing.JRadioButton();
        jrbLongames = new javax.swing.JRadioButton();
        jcbSequentialNaming = new javax.swing.JCheckBox();

        fcOutputFolder.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fcOutputFolder.setDialogTitle("Select output folder");
        fcOutputFolder.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extract files");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                onWindowOpened(evt);
            }
        });

        jbtExtract.setMnemonic('E');
        jbtExtract.setText("Extract");
        jbtExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExtract(evt);
            }
        });
        pCommands.add(jbtExtract);

        jbtCancel.setText("Cancel");
        jbtCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        pCommands.add(jbtCancel);

        getContentPane().add(pCommands, java.awt.BorderLayout.SOUTH);

        pMain.setLayout(new java.awt.GridBagLayout());

        pOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        pOutput.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Output folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pOutput.add(jLabel1, gridBagConstraints);

        jtfOutputFolder.setColumns(32);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pOutput.add(jtfOutputFolder, gridBagConstraints);

        jButton1.setText("Browse...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onBrowse(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pOutput.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        pMain.add(pOutput, gridBagConstraints);

        pSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        pSettings.setLayout(new java.awt.GridBagLayout());

        jcbBinaries.setMnemonic('b');
        jcbBinaries.setSelected(true);
        jcbBinaries.setText("Extract binary/flat files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pSettings.add(jcbBinaries, gridBagConstraints);

        jcbTapeImages.setMnemonic('t');
        jcbTapeImages.setText("Extract tape images");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pSettings.add(jcbTapeImages, gridBagConstraints);

        jcbForceBinaries.setText("Extract all file types to binary files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pSettings.add(jcbForceBinaries, gridBagConstraints);

        jcbBigCas.setText("Extract to single tape image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pSettings.add(jcbBigCas, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        pMain.add(pSettings, gridBagConstraints);

        pNaming.setBorder(javax.swing.BorderFactory.createTitledBorder("File names"));
        pNaming.setLayout(new java.awt.GridBagLayout());

        bgNameLength.add(jcbShortNames);
        jcbShortNames.setMnemonic('S');
        jcbShortNames.setText("Short (8.3) names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pNaming.add(jcbShortNames, gridBagConstraints);

        bgNameLength.add(jrbLongames);
        jrbLongames.setMnemonic('L');
        jrbLongames.setSelected(true);
        jrbLongames.setText("Long names (10.3)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pNaming.add(jrbLongames, gridBagConstraints);

        jcbSequentialNaming.setMnemonic('q');
        jcbSequentialNaming.setText("Sequential naming");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        pNaming.add(jcbSequentialNaming, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        pMain.add(pNaming, gridBagConstraints);

        getContentPane().add(pMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onExtract(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExtract
        
        Extractor.ExtractorConfig ec = new Extractor.ExtractorConfig(
                jcbBinaries.isSelected(),
                jcbTapeImages.isSelected(),
                jcbForceBinaries.isSelected(),
                jrbLongames.isSelected(),
                jcbSequentialNaming.isSelected(),
                jcbBigCas.isSelected(),
                jtfOutputFolder.getText(),
                fileProxies
        );
        
        Extractor extr = new Extractor(ec);
        try {
            int numExtractions = extr.extract();
            JOptionPane.showMessageDialog(this, String.format("Files extracted: %d",numExtractions), "Extraction complete", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (Exception e) {
            String message = e.getMessage();
            if (message==null) message="";
            message=e.getClass().getName()+":"+message;
            JOptionPane.showMessageDialog(this, message, "Extraction failed",JOptionPane.ERROR_MESSAGE);
        }
        
        
        
    }//GEN-LAST:event_onExtract

    private void onBrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onBrowse
        
        int result = fcOutputFolder.showSaveDialog(this);
        File f = fcOutputFolder.getSelectedFile();
        
        if (result!=JFileChooser.APPROVE_OPTION) return;
        if (f==null || !f.isDirectory()) return;
        
        jtfOutputFolder.setText(f.getAbsolutePath());
        
        
    }//GEN-LAST:event_onBrowse

    private void onWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowOpened
        UIPersistence uip = UIPersistence.getInstance();
        
        jtfOutputFolder.setText(uip.extractFolder);
        fcOutputFolder.setCurrentDirectory(new File(uip.extractFolder));
        
        jcbBinaries.setSelected(uip.extractBinaries);
        jcbTapeImages.setSelected(uip.extractTapes);
        jcbForceBinaries.setSelected(uip.extractForceBinaries);
        jrbLongames.setSelected(uip.extractLongNames);
        jcbSequentialNaming.setSelected(uip.extractSequentialNaming);
        jcbBigCas.setSelected(uip.extractBigCas);
        
    }//GEN-LAST:event_onWindowOpened

    private void onClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClosing
        UIPersistence uip = UIPersistence.getInstance();
        uip.extractFolder=jtfOutputFolder.getText();
        uip.extractBinaries=jcbBinaries.isSelected();
        uip.extractTapes=jcbTapeImages.isSelected();
        uip.extractForceBinaries=jcbForceBinaries.isSelected();
        uip.extractLongNames=jcbShortNames.isSelected();
        uip.extractSequentialNaming=jcbSequentialNaming.isSelected();
        uip.extractBigCas=jcbBigCas.isSelected();
    }//GEN-LAST:event_onClosing

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        dispose();
    }//GEN-LAST:event_onCancel

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExtractDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExtractDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExtractDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtractDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExtractDialog dialog = new ExtractDialog(new javax.swing.JFrame(),null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgNameLength;
    private javax.swing.JFileChooser fcOutputFolder;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtCancel;
    private javax.swing.JButton jbtExtract;
    private javax.swing.JCheckBox jcbBigCas;
    private javax.swing.JCheckBox jcbBinaries;
    private javax.swing.JCheckBox jcbForceBinaries;
    private javax.swing.JCheckBox jcbSequentialNaming;
    private javax.swing.JRadioButton jcbShortNames;
    private javax.swing.JCheckBox jcbTapeImages;
    private javax.swing.JRadioButton jrbLongames;
    private javax.swing.JTextField jtfOutputFolder;
    private javax.swing.JPanel pCommands;
    private javax.swing.JPanel pMain;
    private javax.swing.JPanel pNaming;
    private javax.swing.JPanel pOutput;
    private javax.swing.JPanel pSettings;
    // End of variables declaration//GEN-END:variables
}
