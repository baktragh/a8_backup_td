package udman;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class UdManFrame extends javax.swing.JFrame {

    /**
     * Creates new form UdManFrame
     */
    public UdManFrame() {
        initComponents();
        updateSelectionDependentControlsEnablement();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcOpen = new javax.swing.JFileChooser();
        jspScrollFiles = new javax.swing.JScrollPane();
        jlsFiles = new javax.swing.JList<>();
        pStatus = new javax.swing.JPanel();
        lStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmiSelectNone = new javax.swing.JMenuItem();
        jmiSelectAll = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiRename = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiMoveUp = new javax.swing.JMenuItem();
        jmiMoveDown = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(TITLE_BASE);
        getContentPane().setLayout(new java.awt.BorderLayout(4, 4));

        jlsFiles.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jlsFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onListSelectionChanged(evt);
            }
        });
        jspScrollFiles.setViewportView(jlsFiles);

        getContentPane().add(jspScrollFiles, java.awt.BorderLayout.CENTER);

        pStatus.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 4));

        lStatus.setFont(lStatus.getFont().deriveFont((lStatus.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD, lStatus.getFont().getSize()-1));
        lStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pStatus.add(lStatus);

        getContentPane().add(pStatus, java.awt.BorderLayout.SOUTH);

        jmFile.setMnemonic('F');
        jmFile.setText("File");

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiOpen.setMnemonic('O');
        jmiOpen.setText("Open disk image...");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenDiskImage(evt);
            }
        });
        jmFile.add(jmiOpen);
        jmFile.add(jSeparator1);

        jmiSave.setMnemonic('S');
        jmiSave.setText("Save");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSave(evt);
            }
        });
        jmFile.add(jmiSave);

        jmiSaveAs.setText("Save as...");
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSave(evt);
            }
        });
        jmFile.add(jmiSaveAs);
        jmFile.add(jSeparator3);

        jmiExit.setMnemonic('x');
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExit(evt);
            }
        });
        jmFile.add(jmiExit);

        jMenuBar1.add(jmFile);

        jmEdit.setMnemonic('E');
        jmEdit.setText("Edit");

        jmiSelectNone.setMnemonic('n');
        jmiSelectNone.setText("Select none");
        jmiSelectNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectNone(evt);
            }
        });
        jmEdit.add(jmiSelectNone);

        jmiSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSelectAll.setMnemonic('a');
        jmiSelectAll.setText("Select all");
        jmiSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectAll(evt);
            }
        });
        jmEdit.add(jmiSelectAll);
        jmEdit.add(jSeparator2);

        jmiRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiRename.setMnemonic('R');
        jmiRename.setText("Rename...");
        jmiRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRename(evt);
            }
        });
        jmEdit.add(jmiRename);

        jmiDelete.setText("Delete...");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDelete(evt);
            }
        });
        jmEdit.add(jmiDelete);
        jmEdit.add(jSeparator4);

        jmiMoveUp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jmiMoveUp.setMnemonic('u');
        jmiMoveUp.setText("Move up");
        jmiMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMoveItem(evt);
            }
        });
        jmEdit.add(jmiMoveUp);

        jmiMoveDown.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jmiMoveDown.setMnemonic('d');
        jmiMoveDown.setText("Move down");
        jmiMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMoveItem(evt);
            }
        });
        jmEdit.add(jmiMoveDown);

        jMenuBar1.add(jmEdit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onOpenDiskImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOpenDiskImage
        int result = fcOpen.showOpenDialog(this);
        if (result!=JFileChooser.APPROVE_OPTION || fcOpen.getSelectedFile()==null) return;
        
        try {
            File f = fcOpen.getSelectedFile();
            UtilityDisk ud = new UtilityDisk(f.getAbsolutePath());
            setDisk(ud);
        }
        catch (IOException ioe) {
            StringBuilder sb = new StringBuilder();
            sb.append("<HTML>");
            sb.append(ioe.getMessage());
            sb.append("</HTML>");
            
            JOptionPane.showMessageDialog(this, sb.toString(), "Unable to open disk image",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_onOpenDiskImage

    private void onRename(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRename
        
        /*Check if something selected*/
        int selectedIndex = jlsFiles.getSelectedIndex();
        if (selectedIndex==-1) return;
        
        /*Get the selected item*/
        DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
        FileProxy fp = dlm.getElementAt(selectedIndex);
        
        /*Show the dialog*/
        RenameDialog rDialog = new RenameDialog(this,true,fp.getNameChars());
        rDialog.pack();
        Udman.centerContainer(rDialog);
        rDialog.setVisible(true);
        
        /*If a new value was set, update the model*/
        if (rDialog.getUpdatedNameChars()!=null) {
            fp.setNameChars(rDialog.getUpdatedNameChars());
            dlm.itemUpdate(fp);
        }
        
    }//GEN-LAST:event_onRename

    private void onSelectNone(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectNone
        jlsFiles.getSelectionModel().clearSelection();
    }//GEN-LAST:event_onSelectNone

    private void onSelectAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectAll
        
        int size = jlsFiles.getModel().getSize();
        if (size==0) return;
        jlsFiles.getSelectionModel().setSelectionInterval(0,size-1);
    }//GEN-LAST:event_onSelectAll

    private void onMoveItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onMoveItem
        
        if (jlsFiles.getSelectedIndex()==-1) return;
        
        DiskListModel.MoveDirection direction = evt.getSource()==jmiMoveUp?DiskListModel.MoveDirection.UP:DiskListModel.MoveDirection.DOWN;
        DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
        dlm.moveElements(jlsFiles.getSelectedIndices(), direction, jlsFiles.getSelectionModel());
        
    }//GEN-LAST:event_onMoveItem

    private void onExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExit
        setVisible(false);
        dispose();
    }//GEN-LAST:event_onExit

    private void onSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSave
        boolean askForSpec = false;
        if (evt.getSource()==jmiSaveAs) askForSpec=true;
        
        if (!(jlsFiles.getModel() instanceof DiskListModel)) return;
        
        DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
        String filespec = dlm.getDisk().getFilespec();
        
        if (filespec.isEmpty()) askForSpec=true;
        
        if (askForSpec) {
            int result = fcOpen.showSaveDialog(this);
            if (result!=JFileChooser.APPROVE_OPTION || fcOpen.getSelectedFile()==null) return;
            filespec = fcOpen.getSelectedFile().getAbsolutePath();
        }
        
        try {
            dlm.getDisk().writeImage(filespec);
            if (askForSpec) dlm.getDisk().setFilespec(filespec);
            updateStatus(dlm.getDisk());
        }
        catch (IOException ioe) {
            String excMessage = ioe.getMessage();
            if (excMessage==null) excMessage="General I/O Error";
            JOptionPane.showMessageDialog(this, excMessage, "Unable to save disk image", JOptionPane.ERROR);
        }
        
    }//GEN-LAST:event_onSave

    private void onListSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onListSelectionChanged
        updateSelectionDependentControlsEnablement();
    }//GEN-LAST:event_onListSelectionChanged

    private void onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDelete
        int[] selIndices = jlsFiles.getSelectedIndices();
        if (selIndices.length<1) return;
        
        int r = JOptionPane.showConfirmDialog(this, "Do you want to delete the selected files?", "Confirm Deletion", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (r!=JOptionPane.YES_OPTION) return;
        
        DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
        dlm.delete(selIndices);
        
    }//GEN-LAST:event_onDelete

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UdManFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fcOpen;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JList<FileProxy> jlsFiles;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiMoveDown;
    private javax.swing.JMenuItem jmiMoveUp;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiRename;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenuItem jmiSelectAll;
    private javax.swing.JMenuItem jmiSelectNone;
    private javax.swing.JScrollPane jspScrollFiles;
    private javax.swing.JLabel lStatus;
    private javax.swing.JPanel pStatus;
    // End of variables declaration//GEN-END:variables

    void setDisk(UtilityDisk ud) {
        DiskListModel dlm = new DiskListModel();
        dlm.setDisk(ud);
        jlsFiles.setModel(dlm);
        updateStatus(ud);
        
    }
    
    private void updateStatus(UtilityDisk ud) {
        this.setTitle(TITLE_BASE+" - "+ud.getFileName());
        this.lStatus.setText(ud.getStatusInfo());
    }
    
    private void updateSelectionDependentControlsEnablement() {
        
        int[] indices = jlsFiles.getSelectedIndices();
        
        jmiRename.setEnabled(indices.length==1);
        jmiMoveUp.setEnabled(indices.length>0);
        jmiMoveDown.setEnabled(indices.length>0);
        jmiDelete.setEnabled(indices.length>0);
        
        
    }
    
    private final String TITLE_BASE = "Backup T/D Utility Disk Manager 0.01";
}
