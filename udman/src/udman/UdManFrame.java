package udman;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

public class UdManFrame extends javax.swing.JFrame {

    /**
     * Creates new form UdManFrame
     */
    public UdManFrame() {
        initComponents();
        updateSelectionDependentControlsEnablement();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcOpen = new javax.swing.JFileChooser();
        jspScrollFiles = new javax.swing.JScrollPane();
        jlsFiles = new javax.swing.JList<>();
        pStatus = new javax.swing.JPanel();
        lStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiExtract = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiImport = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jmiDisplayStats = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmiSelectNone = new javax.swing.JMenuItem();
        jmiSelectAll = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiRename = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiMoveUp = new javax.swing.JMenuItem();
        jmiMoveDown = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(TITLE_BASE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                onWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(4, 4));

        jlsFiles.setTransferHandler(new ImportExportTransferHandler());
        jlsFiles.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jlsFiles.setDragEnabled(true);
        jlsFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onListSelectionChanged(evt);
            }
        });
        jspScrollFiles.setViewportView(jlsFiles);

        getContentPane().add(jspScrollFiles, java.awt.BorderLayout.CENTER);

        pStatus.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 4));

        lStatus.setFont(lStatus.getFont().deriveFont((lStatus.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD, lStatus.getFont().getSize()-1));
        lStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pStatus.add(lStatus);

        getContentPane().add(pStatus, java.awt.BorderLayout.SOUTH);

        jmFile.setMnemonic('F');
        jmFile.setText("File");

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiOpen.setMnemonic('O');
        jmiOpen.setText("Open disk image...");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenDiskImage(evt);
            }
        });
        jmFile.add(jmiOpen);
        jmFile.add(jSeparator1);

        jmiSave.setMnemonic('S');
        jmiSave.setText("Save");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSave(evt);
            }
        });
        jmFile.add(jmiSave);

        jmiSaveAs.setText("Save as...");
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSave(evt);
            }
        });
        jmFile.add(jmiSaveAs);
        jmFile.add(jSeparator3);

        jmiExtract.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiExtract.setMnemonic('E');
        jmiExtract.setText("Extract files...");
        jmiExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExtract(evt);
            }
        });
        jmFile.add(jmiExtract);
        jmFile.add(jSeparator5);

        jmiImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiImport.setMnemonic('I');
        jmiImport.setText("Import monolithic binaries...");
        jmiImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onImport(evt);
            }
        });
        jmFile.add(jmiImport);
        jmFile.add(jSeparator7);

        jmiDisplayStats.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiDisplayStats.setMnemonic('D');
        jmiDisplayStats.setText("Display statistics...");
        jmiDisplayStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onStats(evt);
            }
        });
        jmFile.add(jmiDisplayStats);
        jmFile.add(jSeparator6);

        jmiExit.setMnemonic('x');
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExit(evt);
            }
        });
        jmFile.add(jmiExit);

        jMenuBar1.add(jmFile);

        jmEdit.setMnemonic('E');
        jmEdit.setText("Edit");

        jmiSelectNone.setMnemonic('n');
        jmiSelectNone.setText("Select none");
        jmiSelectNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectNone(evt);
            }
        });
        jmEdit.add(jmiSelectNone);

        jmiSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSelectAll.setMnemonic('a');
        jmiSelectAll.setText("Select all");
        jmiSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectAll(evt);
            }
        });
        jmEdit.add(jmiSelectAll);
        jmEdit.add(jSeparator2);

        jmiRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiRename.setMnemonic('R');
        jmiRename.setText("Rename...");
        jmiRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRename(evt);
            }
        });
        jmEdit.add(jmiRename);

        jmiDelete.setText("Delete...");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDelete(evt);
            }
        });
        jmEdit.add(jmiDelete);
        jmEdit.add(jSeparator4);

        jmiMoveUp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jmiMoveUp.setMnemonic('u');
        jmiMoveUp.setText("Move up");
        jmiMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMoveItem(evt);
            }
        });
        jmEdit.add(jmiMoveUp);

        jmiMoveDown.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jmiMoveDown.setMnemonic('d');
        jmiMoveDown.setText("Move down");
        jmiMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onMoveItem(evt);
            }
        });
        jmEdit.add(jmiMoveDown);

        jMenuBar1.add(jmEdit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onOpenDiskImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOpenDiskImage
        int result = fcOpen.showOpenDialog(this);
        if (result != JFileChooser.APPROVE_OPTION || fcOpen.getSelectedFile() == null) {
            return;
        }

        try {
            File f = fcOpen.getSelectedFile();
            UtilityDisk ud = new UtilityDisk(f.getAbsolutePath());
            setDisk(ud);
        }
        catch (IOException ioe) {
            StringBuilder sb = new StringBuilder();
            sb.append("<HTML>");
            sb.append(ioe.getMessage());
            sb.append("</HTML>");

            JOptionPane.showMessageDialog(this, sb.toString(), "Unable to open disk image", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_onOpenDiskImage

    private void onRename(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRename

        /*Check if something selected*/
        int selectedIndex = jlsFiles.getSelectedIndex();
        if (selectedIndex == -1) {
            return;
        }

        /*Get the selected item*/
        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();
        FileProxy fp = dlm.getElementAt(selectedIndex);

        /*Show the dialog*/
        RenameDialog rDialog = new RenameDialog(this, true, fp.getNameChars());
        rDialog.pack();
        Udman.centerContainer(rDialog);
        rDialog.setVisible(true);

        /*If a new value was set, update the model*/
        if (rDialog.getUpdatedNameChars() != null) {
            fp.setNameChars(rDialog.getUpdatedNameChars());
            dlm.itemUpdate(fp);
        }

    }//GEN-LAST:event_onRename

    private void onSelectNone(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectNone
        jlsFiles.getSelectionModel().clearSelection();
    }//GEN-LAST:event_onSelectNone

    private void onSelectAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectAll

        int size = jlsFiles.getModel().getSize();
        if (size == 0) {
            return;
        }
        jlsFiles.getSelectionModel().setSelectionInterval(0, size - 1);
    }//GEN-LAST:event_onSelectAll

    private void onMoveItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onMoveItem

        if (jlsFiles.getSelectedIndex() == -1) {
            return;
        }

        DiskListModel.MoveDirection direction = evt.getSource() == jmiMoveUp ? DiskListModel.MoveDirection.UP : DiskListModel.MoveDirection.DOWN;
        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();
        dlm.moveElements(jlsFiles.getSelectedIndices(), direction, jlsFiles.getSelectionModel());

    }//GEN-LAST:event_onMoveItem

    private void onExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExit
        setVisible(false);
        dispose();
    }//GEN-LAST:event_onExit

    private void onSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSave
        boolean askForSpec = false;
        if (evt.getSource() == jmiSaveAs) {
            askForSpec = true;
        }

        if (!(jlsFiles.getModel() instanceof DiskListModel)) {
            return;
        }

        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();
        String filespec = dlm.getDisk().getFilespec();

        if (filespec.isEmpty()) {
            askForSpec = true;
        }

        if (askForSpec) {
            int result = fcOpen.showSaveDialog(this);
            if (result != JFileChooser.APPROVE_OPTION || fcOpen.getSelectedFile() == null) {
                return;
            }
            filespec = fcOpen.getSelectedFile().getAbsolutePath();
        }

        try {
            dlm.getDisk().writeImage(filespec);
            if (askForSpec) {
                dlm.getDisk().setFilespec(filespec);
            }
            updateStatus(dlm.getDisk());
        }
        catch (IOException ioe) {
            String excMessage = ioe.getMessage();
            if (excMessage == null) {
                excMessage = "General I/O Error";
            }
            JOptionPane.showMessageDialog(this, excMessage, "Unable to save disk image", JOptionPane.ERROR);
        }

    }//GEN-LAST:event_onSave

    private void onListSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onListSelectionChanged
        updateSelectionDependentControlsEnablement();
    }//GEN-LAST:event_onListSelectionChanged

    private void onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDelete
        int[] selIndices = jlsFiles.getSelectedIndices();
        if (selIndices.length < 1) {
            return;
        }

        int r = JOptionPane.showConfirmDialog(this, "Do you want to delete the selected files?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (r != JOptionPane.YES_OPTION) {
            return;
        }

        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();
        dlm.delete(selIndices);

    }//GEN-LAST:event_onDelete

    private void onExtract(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExtract
        int[] selIndices = jlsFiles.getSelectedIndices();
        if (selIndices.length < 1) {
            return;
        }

        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();

        ArrayList<FileProxy> proxies = new ArrayList<>();
        for (int i = 0; i < selIndices.length; i++) {
            proxies.add(dlm.getElementAt(selIndices[i]));
        }

        ExtractDialog ed = new ExtractDialog(this, proxies);
        ed.pack();
        Udman.centerContainer(ed);
        ed.setVisible(true);


    }//GEN-LAST:event_onExtract

    private void onClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClosing
        File f = fcOpen.getCurrentDirectory();
        if (f != null) {
            UIPersistence.getInstance().diskFolder = f.getAbsolutePath();
        }
        if (fcImport != null && fcImport.getCurrentDirectory() != null) {
            UIPersistence.getInstance().importFolder = fcImport.getCurrentDirectory().getAbsolutePath();
        }

        UIPersistence.getInstance().save();
    }//GEN-LAST:event_onClosing

    private void onWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowOpened
        fcOpen.setCurrentDirectory(new File(UIPersistence.getInstance().diskFolder));
    }//GEN-LAST:event_onWindowOpened

    private void onImport(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onImport

        JFileChooser fc = getImportChooser();
        int result = fc.showOpenDialog(this);

        if (result != JFileChooser.APPROVE_OPTION || fc.getSelectedFiles().length == 0) {
            return;
        }
        importFiles(fc.getSelectedFiles());

    }//GEN-LAST:event_onImport

    private void onStats(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStats
        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();
        List<FileProxy> proxies = dlm.getDisk().getProxies();

        Extractor.DiskInfo di = Extractor.getDiskInfo(proxies);

        StringBuilder sb = new StringBuilder();
        sb.append("<HTML>");
        sb.append(String.format("Number of files: %d", proxies.size()));
        sb.append("<BR>");
        sb.append(String.format("Total size of files: %d KB", di.numBytes / 1024));
        sb.append("<BR><BR>Estimated recording durations:<BR>");
        sb.append(String.format("Short gaps: %s", Extractor.getTimeStringForSamples(di.numSamplesShort, 44100)));
        sb.append("<BR>");
        sb.append(String.format("Medium gaps: %s", Extractor.getTimeStringForSamples(di.numSamplesMedium, 44100)));
        sb.append("<BR>");
        sb.append(String.format("Long gaps: %s", Extractor.getTimeStringForSamples(di.numSamplesLong, 44100)));
        sb.append("<BR>");
        sb.append("</HTML>");

        JOptionPane.showMessageDialog(this, sb.toString(), "Statistics", JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_onStats

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UdManFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fcOpen;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JList<FileProxy> jlsFiles;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiDisplayStats;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiExtract;
    private javax.swing.JMenuItem jmiImport;
    private javax.swing.JMenuItem jmiMoveDown;
    private javax.swing.JMenuItem jmiMoveUp;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiRename;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenuItem jmiSelectAll;
    private javax.swing.JMenuItem jmiSelectNone;
    private javax.swing.JScrollPane jspScrollFiles;
    private javax.swing.JLabel lStatus;
    private javax.swing.JPanel pStatus;
    // End of variables declaration//GEN-END:variables

    void setDisk(UtilityDisk ud) {
        DiskListModel dlm = new DiskListModel();
        dlm.setDisk(ud);
        jlsFiles.setModel(dlm);
        updateStatus(ud);
    }

    private void updateStatus(UtilityDisk ud) {

        String titleDisk = ud.getFileName().isEmpty() ? "New disk" : ud.getFileName();
        this.setTitle(TITLE_BASE + " - " + titleDisk);
        this.lStatus.setText(ud.getStatusInfo());
    }

    private void updateSelectionDependentControlsEnablement() {

        int[] indices = jlsFiles.getSelectedIndices();

        jmiRename.setEnabled(indices.length == 1);
        jmiMoveUp.setEnabled(indices.length > 0);
        jmiMoveDown.setEnabled(indices.length > 0);
        jmiDelete.setEnabled(indices.length > 0);
        jmiExtract.setEnabled(indices.length > 0);

    }

    private final String TITLE_BASE = "Backup T/D UDMan 0.10";

    private JFileChooser fcImport = null;

    private JFileChooser getImportChooser() {
        if (fcImport != null) {
            return fcImport;
        }
        fcImport = new JFileChooser();
        fcImport.setDialogTitle("Import monolithic binary files");
        fcImport.setDialogType(JFileChooser.OPEN_DIALOG);
        fcImport.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fcImport.setCurrentDirectory(new File(UIPersistence.getInstance().importFolder));
        fcImport.setMultiSelectionEnabled(true);
        return fcImport;
    }

    private void importFiles(File[] files) {
        int goodCount = 0;
        int totalCount = 0;
        int badCount = 0;

        DiskListModel dlm = (DiskListModel) jlsFiles.getModel();

        ArrayList<FileProxy> proxies = new ArrayList<>();
        ArrayList<String> failedFiles = new ArrayList<>();

        for (File oneFile : files) {

            try {
                totalCount++;
                FileProxy oneProxy = dlm.getDisk().importMonolithicBinary(oneFile.getAbsolutePath());
                proxies.add(oneProxy);
                goodCount++;

            }
            catch (Exception e) {
                badCount++;
                String eMsg = e.getMessage();
                if (eMsg == null) {
                    eMsg = "";
                }
                else {
                    eMsg = ": " + eMsg;
                }

                failedFiles.add(oneFile.getName() + eMsg);

            }

        }

        dlm.addProxies(proxies);

        /*Report*/
        StringBuilder sb = new StringBuilder();
        sb.append("<HTML>");
        String message = String.format("Total files: %d, imported: %d, failed: %d", totalCount, goodCount, badCount);
        sb.append(message);

        /*If some failed files*/
        if (!failedFiles.isEmpty()) {
            sb.append("<BR><BR>");
            sb.append("Failed files:<BR>");

            int itemCount = Math.min(12, failedFiles.size());

            for (int i = 0; i < itemCount; i++) {
                sb.append(failedFiles.get(i));
                sb.append("<BR>");
            }

            if (itemCount != failedFiles.size()) {
                sb.append("...<BR>");
            }
        }

        sb.append("</HTML>");
        JOptionPane.showMessageDialog(this, sb.toString(), "Import results", JOptionPane.INFORMATION_MESSAGE);
    }

    private class ImportExportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            if (!support.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                return false;
            }
            support.setDropAction(COPY);
            return true;
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            
            if (!canImport(support)) {
                return false;
            }

            Transferable t = support.getTransferable();

            try {
                java.util.List<?> list = (java.util.List<?>) t.getTransferData(DataFlavor.javaFileListFlavor);

                boolean hasAtr = false;
                boolean hasXex = false;

                /*Prepare list of relevant files*/
                ArrayList<File> validFiles = new ArrayList<>();
                for (Object o : list) {
                    File f = (File) o;
                    if (!f.exists() || !f.isFile()) {
                        continue;
                    }
                    String name = f.getName().toLowerCase();
                    if (name.endsWith(".xex")) {
                        validFiles.add(f);
                        hasXex = true;
                    }
                    if (name.endsWith(".atr")) {
                        validFiles.add(f);
                        hasAtr = true;
                    }
                }

                /*If no files, do nothing*/
                if (validFiles.isEmpty()) {
                    return false;
                }

                /*If a mix of files, do nothing*/
                if (hasAtr && hasXex) {
                    return false;
                }

                if (hasAtr) {
                    if (validFiles.size() != 1) {
                        return false;
                    }
                    UtilityDisk ud = new UtilityDisk(validFiles.get(0).getAbsolutePath());
                    setDisk(ud);
                }
                else if (hasXex) {

                    File[] fs = new File[validFiles.size()];
                    importFiles(validFiles.toArray(fs));
                }

            }
            catch (UnsupportedFlavorException | IOException e) {
                return false;
            }

            return true;
        }
        
//        @Override
//        protected Transferable createTransferable(JComponent c) {
//           
//            int[] selected = jlsFiles.getSelectedIndices();
//            if (selected.length!=1) return null;
//            
//            DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
//            FileProxy proxy = dlm.getElementAt(selected[0]);
//            
//            return new FileProxyTransferable(proxy);
//        }
//        
//        @Override
//        public int getSourceActions(JComponent c) {
//            return (COPY|MOVE|LINK);
//        }
        
    }
    
    private static class FileProxyTransferable implements Transferable {
        
        private static final DataFlavor octetFlavor = new DataFlavor("application/octet-stream",null);
        private static final DataFlavor[] flavors = {octetFlavor};
        private final FileProxy fileProxy;
        
        FileProxyTransferable(FileProxy proxy) {
            this.fileProxy=proxy;
        }
        
        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return flavors;
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return (octetFlavor.equals(flavor));
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            if (!isDataFlavorSupported(flavor)) throw new UnsupportedFlavorException(flavor);
            return fileProxy.toStream();
        }
        
    }

}
