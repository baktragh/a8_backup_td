package udman;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class UdManFrame extends javax.swing.JFrame {

    /**
     * Creates new form UdManFrame
     */
    public UdManFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcOpen = new javax.swing.JFileChooser();
        jspScrollFiles = new javax.swing.JScrollPane();
        jlsFiles = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmiFile = new javax.swing.JMenu();
        jmiOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiRename = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(TITLE_BASE);
        getContentPane().setLayout(new java.awt.BorderLayout(4, 4));

        jlsFiles.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jlsFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspScrollFiles.setViewportView(jlsFiles);

        getContentPane().add(jspScrollFiles, java.awt.BorderLayout.CENTER);

        jmiFile.setMnemonic('F');
        jmiFile.setText("File");

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiOpen.setMnemonic('O');
        jmiOpen.setText("Open disk image...");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenDiskImage(evt);
            }
        });
        jmiFile.add(jmiOpen);
        jmiFile.add(jSeparator1);

        jmiRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiRename.setMnemonic('R');
        jmiRename.setText("Rename...");
        jmiRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRename(evt);
            }
        });
        jmiFile.add(jmiRename);
        jmiFile.add(jSeparator2);

        jmiExit.setMnemonic('x');
        jmiExit.setText("Exit");
        jmiFile.add(jmiExit);

        jMenuBar1.add(jmiFile);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onOpenDiskImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOpenDiskImage
        int result = fcOpen.showOpenDialog(this);
        if (result!=JFileChooser.APPROVE_OPTION || fcOpen.getSelectedFile()==null) return;
        
        try {
            File f = fcOpen.getSelectedFile();
            UtilityDisk ud = new UtilityDisk(f.getAbsolutePath());
            setDisk(ud);
        }
        catch (IOException ioe) {
            StringBuilder sb = new StringBuilder();
            sb.append("<HTML>");
            sb.append(ioe.getMessage());
            sb.append("</HTML>");
            
            JOptionPane.showMessageDialog(this, sb.toString(), "Unable to open disk image",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_onOpenDiskImage

    private void onRename(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRename
        
        /*Check if something selected*/
        int selectedIndex = jlsFiles.getSelectedIndex();
        if (selectedIndex==-1) return;
        
        /*Get the selected item*/
        DiskListModel dlm = (DiskListModel)jlsFiles.getModel();
        FileProxy fp = dlm.getElementAt(selectedIndex);
        
        /*Show the dialog*/
        RenameDialog rDialog = new RenameDialog(this,true,fp.getNameChars());
        rDialog.pack();
        Udman.centerContainer(rDialog);
        rDialog.setVisible(true);
        
        /*If a new value was set, update the model*/
        if (rDialog.getUpdatedNameChars()!=null) {
            fp.setNameChars(rDialog.getUpdatedNameChars());
            dlm.itemUpdate(fp);
        }
        
        
        
    }//GEN-LAST:event_onRename

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UdManFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UdManFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fcOpen;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JList<FileProxy> jlsFiles;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenu jmiFile;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiRename;
    private javax.swing.JScrollPane jspScrollFiles;
    // End of variables declaration//GEN-END:variables

    void setDisk(UtilityDisk ud) {
        DiskListModel dlm = new DiskListModel();
        dlm.setDisk(ud);
        jlsFiles.setModel(dlm);
        this.setTitle(TITLE_BASE+" - "+ud.getFileName());
    }
    
    private final String TITLE_BASE = "Backup T/D Utility Disk Manager";
}
